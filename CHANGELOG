From 1.1 to 1.1.1
------------------

Minor changes: 
* RTA, RRTA, XTA: a list of subclasses of java.lang.Throwable that could be 
  instantiated and thrown by the JVM is provided. Algorithms RTA, RRTA and XTA use 
  this list as default value for an optional argument that allows to specify 
  that these classes could be instantiated in program.
* XTA: add the optional argument '~native_throwable' that allow to specify subclasses 
  of java.lang.Throwable that could be instantiated and thrown by the VM, classes are 
  considered as instantiated when needed.
* Version number of Sawja in FindLib was indicated 1.0.1 for version 1.1, 
  now it is the correct number (1.1.1)

Major bug fixes:
* RRTA: type of receiver was not taken as possible type parameter in virtual methods: 
  as a consequence virtual calls on the receiver in a method were ignored 
  if another source for this type was not accessible in the virtual method
* XTA: arrays were not correctly managed:
  - type of arrays was abstracted by type java.lang.Object as static type 
    and could lead to loss of precision for approximation of dynamic type
  - type of arrays content was not managed. Although it was partially 
    compensated by precedent point it was unsound
  => static type of arrays is now correctly managed
  => type of arrays content is now managed by a correct over-approximation
     (global for program)
* RRTA and XTA: exception handlers were not taken in account:
  - handled exceptions types were not considered as possible type parameters in method.
    As a consequence only exceptions instantiated in the method were considered
    instantiated for calls that use an exception (as argument or receiver)
  => exceptions that could be instantiated when a handler is present is now a 
     correct over-approximation (global for program)

Minor bug fixes:
* XTA: OpConst(Class _) and OpConst(String _) instructions were not considered 
  as instantiation of java.lang.Class and java.lang.String, now it is
* RTA, RRTA: OpConst(String _) instruction was not considered 
  as instantiation of java.lang.String, now it is
* removing some debugging messages from JFile.iter (display number of classes)



From 1.0.1 to 1.1
------------------

Compilation & Installation changes:
* installation process now rely on Findlib (more homogeneous installation,
  easier to use as dependencies are automatically linked in)
* add a configure script into the compilation routine that automatically
  generate the appropriate Makefile.config file. Local installation is now an
  easy option

New features:
* add JsrInline, a module which allows to in-line most subroutines (all but
  nested ones)
* BIR code representation is now flatten and represented as an array.
  Correspondence tables between bytecode (JCode) and BIR have been added.
* add a call graph computation algorithm with different level of sensitivity
  (ranging from MTA to XTA) (see documentation in XTA)
* add a module Safe, a static analysis framework, which provides a fixpoint
  iterator, domain composition, standard containers for method, fields, class
  and program points, etc.
* JVMTI which can be use to add static information on native method during
  program discovery (RTA, CRA).

Minor changes:
* IR changes:
  - add a ~bcv flag (to [transform] functions in JBir and A3Bir) which run a
    ByteCode Verifier
  - new exception_handler type, a specific catch var is created for each handler
  - add printing functions (string and for JPrintHTML)
  - var is now indexed
  - structural equality (=) can be used on var (but var_equal function is
    faster)
* RTA changes:
  - add a list of default instantiated classes and abstract entry points
  - more classes are now loaded: catch type of handlers and field types of
    loaded classes are loaded (even if not accessed)
* add static_lookup_special function in JControlFlow (for invokespecial
  instruction)
* module JPrintHTML is now generic with respect to the implementation of methods
* the documentation of Sawja now includes the documentation of the
  user-interface of Javalib for cross-references (Javalib, JBasics and JCode)
* zip can be used where jar were expected
* improve documentation and tutorial

Bug fixes:
* fixes some CSS bugs
* bugfix on arrayload types of BIR representations
* correct handling of local variable names (debug option) in JPrintHTML.
* CheckArthimetic was missing in jBir
* a Cast unary operator was missing in jBir

Known bug:
* Program discovery does not include native methods and reflection
* Inconsistencies between results of XTA, RTA, RRTA and CRA.

From 1.0 to 1.0.1
----------------
Minor fixes:
* typos in documentation / tutorial / quick start
* better error handling in JPrintHtml
* providing style.css which was missing (looks better in JPrintHtml)
* installation procedure should run more smoothly

Initial release 1.0
--------------------
This initial version features a fork from Javalib 1.8.1 where the code
concerning the program representation and manipulation has been moved from
Javalib to SAWJA.  From Javalib 1.8.1, The main improvements includes the
bytecode transformations, the overall efficiency (more lazy stuff, indexed data,
caches, etc.) and the cleanner interfaces and documentation.

Main features:
* Program representation where the bytecode (method) representation can be
  modified
* Intermediate bytecode representation (bytecode with expressions and without
  stack and 3 addresses code)
* Control flow manipulation (resolution of classes, fields and methods, static
  over approximation of lookups, etc.)
* Program discovery with RTA (Rapid Type Analysis), CRA (Class Reachability
  Analysis) and RRTA (Refine Rapid Type Analysis)
* Stub generation for object allocation for native methods from concrete
  execution
* Program pretty printing as text or HTML output
